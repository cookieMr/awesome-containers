services:

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    platform: linux/amd64
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_volume:/opt/sonarqube
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_postgres:5432/${SONAR_DATABASE}
      SONAR_JDBC_USERNAME: ${SONAR_DB_USER}
      SONAR_JDBC_PASSWORD: ${SONAR_DB_PASSWORD}
      SONAR_TELEMETRY_ENABLED: false
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://sonarqube:9000/healthcheck",
        ]
      interval: 10s
      timeout: 9s
      retries: 3
      start_period: 30s
    depends_on:
      sonar_postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sonarq-network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G

  sonar_postgres:
    image: postgres:alpine
    container_name: sonarqube-postgres
    platform: linux/amd64
    volumes:
      - sonar_db_volume:/var/lib/postgresql
    environment:
      POSTGRES_DB: ${SONAR_DATABASE}
      POSTGRES_USER: ${SONAR_DB_USER}
      POSTGRES_PASSWORD: ${SONAR_DB_PASSWORD}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--quiet",
          "--username",
          "${SONAR_DB_USER}",
          "--dbname",
          "${SONAR_DATABASE}",
        ]
      interval: 10s
      timeout: 9s
      retries: 3
      start_period: 10s
    depends_on:
      grafana_lgtm:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sonarq-network
      - otel-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  it_tools:
    image: ghcr.io/corentinth/it-tools:latest
    container_name: it-tools
    platform: linux/amd64
    ports:
      - "80:80"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail http://it-tools:80 > /dev/null || exit 1",
        ]
      interval: 10s
      timeout: 9s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256M

  grafana_lgtm:
    image: grafana/otel-lgtm:latest
    container_name: grafana-lgtm
    platform: linux/amd64
    ports:
      - "3000:3000"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - grafana_storage:/var/lib/grafana
    environment:
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_EXPORTER_OTLP_ENDPOINT: http://grafana-lgtm:4318
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail http://grafana-lgtm:3000/api/health > /dev/null || exit 1",
        ]
      interval: 15s
      timeout: 14s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - otel-network
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G

  wiremock:
    image: wiremock/wiremock:latest-alpine
    container_name: wiremock
    platform: linux/amd64
    ports:
      - "8081:8080"
    volumes:
      - ${WIREMOCK_TEST_MAPPINGS_PATH}:/home/wiremock/mappings:ro
    environment:
      WIREMOCK_OPTIONS: "--disable-banner"
    healthcheck:
      test: 
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://wiremock:8080/__admin/mappings"
        ]
      interval: 10s
      timeout: 9s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 512M

  mermaid_uml:
    image: ghcr.io/mermaid-js/mermaid-live-editor:latest
    container_name: mermaid-uml
    platform: linux/amd64
    ports:
      - "8082:8080"
    healthcheck:
      test: 
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://mermaid-uml:8080"
        ]
      interval: 10s
      timeout: 9s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 512M

volumes:
  grafana_storage: {}
  sonarqube_volume: {}
  sonar_db_volume: {}

networks:
  otel-network: {}
  sonarq-network: {}
